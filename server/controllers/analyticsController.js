const Order = require("../models/Order");
const User = require("../models/User");
const Restaurant = require("../models/Restaurant");

// Returns the user who has placed the most orders
exports.getMostActiveUserForRestaurant = async (req, res, next) => {
  const { restaurantId } = req.params;
  const n = req.query.n || 1; // default to returning the top 1 user

  try {
    const users = await Order.aggregate([
      {
        $match: { restaurant: restaurantId },
      },
      {
        $group: {
          _id: "$user",
          count: { $sum: 1 },
        },
      },
      {
        $sort: { count: -1 },
      },
      {
        $limit: n,
      },
    ]);

    res.status(200).json(users);
  } catch (err) {
    next(err);
  }
};

// Returns the total revenue generated by each restaurant
const getTotalRevenueByRestaurant = async (req, res) => {
  try {
    const totalRevenueByRestaurant = await Order.aggregate([
      { $group: { _id: "$restaurant", revenue: { $sum: "$total" } } },
      {
        $lookup: {
          from: "restaurants",
          localField: "_id",
          foreignField: "_id",
          as: "restaurant",
        },
      },
      { $unwind: "$restaurant" },
      {
        $project: {
          _id: "$restaurant._id",
          name: "$restaurant.name",
          revenue: 1,
        },
      },
    ]);

    res.json(totalRevenueByRestaurant);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server error" });
  }
};

// Returns the average order value of each user
const getAverageOrderValueByUser = async (req, res) => {
  try {
    const averageOrderValueByUser = await Order.aggregate([
      { $group: { _id: "$user", averageOrderValue: { $avg: "$total" } } },
      {
        $lookup: {
          from: "users",
          localField: "_id",
          foreignField: "_id",
          as: "user",
        },
      },
      { $unwind: "$user" },
      {
        $project: {
          _id: "$user._id",
          name: "$user.name",
          email: "$user.email",
          averageOrderValue: 1,
        },
      },
    ]);

    res.json(averageOrderValueByUser);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server error" });
  }
};

// Returns the top N users who have placed the most orders
const getMostActiveUsers = async (req, res, next) => {
  try {
    const { n } = req.params; // number of top users to return
    const users = await User.aggregate([
      {
        $lookup: {
          from: "orders",
          localField: "_id",
          foreignField: "user",
          as: "orders",
        },
      },
      {
        $project: {
          name: 1,
          email: 1,
          orderCount: { $size: "$orders" },
        },
      },
      { $sort: { orderCount: -1 } },
      { $limit: parseInt(n) },
    ]);
    res.status(200).json(users);
  } catch (error) {
    next(error);
  }
};

module.exports = {
  getMostActiveUserForRestaurant,
  getTotalRevenueByRestaurant,
  getAverageOrderValueByUser,
  getMostActiveUsers,
};
